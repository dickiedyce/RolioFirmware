/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MACOS     0
#define FKEYS     1
#define NUMBERS   2
#define WINDOWS   3
#define W_FKEYS   4
#define W_NUMBERS 5
#define MATHS     6
#define KB_CONFIG 7

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        pal: pal {
            label = "Pallette";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LCTRL>,
                <&macro_release>,
                <&kp LGUI>;
        };

        wpal: wpal {
            label = "W_Pallette";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp DOT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        // Zoom macros

        zoom_in: zoom_in {
            label = "ZOOM_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_release>,
                <&kp LGUI>;
        };

        zoom_out: zoom_out {
            label = "ZOOM_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_release>,
                <&kp LGUI>;
        };

        reset_zoom: reset_zoom {
            label = "RESET_ZOOM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp N0>,
                <&macro_release>,
                <&kp LGUI>;
        };

        w_zoom_in: w_zoom_in {
            label = "WINDOWS_ZOOM_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        w_zoom_out: w_zoom_out {
            label = "WINDOWS_ZOOM_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        w_reset_zoom: w_reset_zoom {
            label = "WINDOWS_RESET_ZOOM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp N0>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Mac OS";
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
            bindings = <
&gqt LS(TAB) TAB  &kp Q        &gqt LS(LA(LC(LG(D)))) D  &gqt LS(LA(LC(LG(R)))) R  &gqt LS(LA(LC(LG(W)))) W  &gqt PIPE B                                     &kp J        &kp F                &kp U          &kp P        &kp SEMI         &kp ESC
&kp BSPC          &gqt N1 A    &gqt N2 S                 &gqt N3 H                 &gqt N4 T                 &gqt N5 G                                       &gqt N6 Y    &gqt N7 N            &gqt N8 E      &gqt N9 O    &gqt N0 I        &gqt GRAVE SQT
&kp LSHFT         &gqt LBKT Z  &gqt RBKT X               &gqt LPAR M               &gqt RPAR C               &gqt LC(LA(LG(LS(N)))) V  &kp F16      &kp F17  &gqt LBRC K  &gqt RBRC L          &gqt LT COMMA  &gqt GT DOT  &gqt QMARK FSLH  &kp RCTRL
                               &none                     &kp LCTRL                 &kp RALT                  &kp LGUI                  &lt 1 SPACE  &kp RET  &mo 1        &gqt LG(SEMI) TILDE  &none          &none
            >;
        };

        settings_layer {
            label = "Settings";
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans    &trans     &trans     &trans     &trans
&trans      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                        &trans  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans      &none         &bt BT_CLR    &bl BL_DEC    &bl BL_TOG    &bl BL_INC    &trans  &trans  &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
                          &trans        &trans        &trans        &none         &trans  &trans  &trans  &trans    &trans     &trans
            >;
        };
    };
};
